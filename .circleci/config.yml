version: 2.1

workflows:
  version: 2

# Workflow to cleanup preview deploys from AWS.
  cleanup preview deploys:
    triggers:
      - schedule:
          cron: "0 0,4,8,12,16,20 * * *" # Every 4 hours
          filters:
            branches:
              only:
                - master
    jobs:
      - cleanup preview deploys

# Workflow to cleanup Packer AMIs from AWS.
  cleanup packer amis:
    triggers:
      - schedule:
          cron: "0 6 * * *" # Every day at 6 am
          filters:
            branches:
              only:
                - master
    jobs:
      - cleanup packer amis

# Workflows to validate IaC configurations  
  packer validation:
    triggers:
      - schedule:
          cron: '0 4 * * *' # Every day at 4 am
          filters:
            branches:
              only:
                - main
    jobs:
      - packer validation tests:
          name: Packer Validation Tests
          
  terraform validation:
    triggers:
      - schedule:
          cron: '0 4 * * *' # Every day at 4 am
          filters:
            branches:
              only:
                - main
    jobs:
      - terraform validation tests:
          name: Terraform Validation Tests

# Workflow to scan dependencies for vulnerabilities every night
  nightly dependency vulnerability scan:
    triggers:
      - schedule:
          cron: '0 0 * * *' # Every night at midnight
          filters:
            branches:
              only:
                - main
    jobs:
      - install dependencies
      - dependency vulnerability scan:
          requires:
            - install dependencies

  # Workflow to build new AMIs based on the latest gold images weekly
  weekly aws ami builds:
    triggers:
      - schedule:
          cron: '0 1 * * 1' # Mondays at 1 am
          filters:
            branches:
              only:
                - main
    jobs:
      - packer validation tests:
          name: Packer Validation Tests
      - build preview ami:
          name: Build Preview AMI
          requires:
            - Packer Validation Tests
      - build production staging ami:
          name: Build Prod Staging AMI
          requires:
            - Packer Validation Tests
      - cleanup preview ami:
          name: Cleanup Old Unused Preview AMIs
          requires:
            - Build Preview AMI
      - cleanup production staging ami:
          name: Cleanup Old Unused Production/Staging AMIs
          requires:
            - Build Prod Staging AMI
            - Cleanup Old Unused Preview AMIs

  # Tests
  owasp, e2e, and chromatic:
    jobs:
      - hold:
          type: approval
      - owasp zap scan:
          filters:
            tags:
              ignore: /.*/
          requires: 
            - hold
      - e2e test:
          env: PRODUCTION
          filters:
            tags:
              ignore: /.*/
          requires: 
            - hold
      - chromatic deployment:
          env: PRODUCTION
          filters:
            tags:
              ignore: /.*/
          requires: 
            - hold
      - packer validation tests:
          requires:
            - hold
      - terraform validation tests:
          requires:
            - hold

  # Workflow to test, build, and deploy the backend and frontend
  test, build, and deploy:
    jobs:
      # independent jobs
      - install dependencies:
          filters:
            tags:
              only: /.*/
      - dependency vulnerability scan:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
      - owasp zap scan:
          filters:
            branches:
              only:
                - main          
            #tags:
              #ignore: ignore-owasp
      - validate openapi:
          filters:
            tags:
              only: /.*/
      - yaml test:
          filters:
            tags:
              only: /.*/
      - e2e test:
          name: e2e test staging
          env: STAGING
          filters:
            branches:
              only:
                - main
              #ignore:
                #- main
                #- gh-pages
            tags:
              ignore: ignore-e2e
          requires:
            - frontend lint
            - backend lint
            - dependency vulnerability scan
            - yaml test
      - e2e test:
          name: e2e test production
          env: PRODUCTION
          filters:
            branches:
              only:
                - main            
              #ignore:
                #- main
                #- gh-pages
            tags:
              ignore: ignore-e2e
          requires:
            - frontend lint
            - backend lint
            - dependency vulnerability scan
            - yaml test

      - chromatic deployment:
          name: chromatic deployment staging
          env: STAGING
          filters:
            branches:
              only:
                - main            
              #ignore:
                #- gh-pages
            tags:
              ignore: ignore-e2e
          requires:
            - frontend lint
            - backend lint
            - dependency vulnerability scan
            - yaml test
            - owasp zap scan
            - e2e test staging
      - chromatic deployment:
          name: chromatic deployment production
          env: PRODUCTION
          filters:
            branches:
              only:
                - main               
              #ignore:
                #- gh-pages
            tags:
              ignore: ignore-e2e
          requires:
            - frontend lint
            - backend lint
            - dependency vulnerability scan
            - yaml test
            - owasp zap scan
            - e2e test production            

      # backend jobs
      - backend api endpoint test:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
      - backend lint:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
      - backend unit test:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
      - backend deploy:
          name: backend deploy staging
          env: STAGING
          filters:
            branches:
              only:
                - main
            tags:
              only:
                - /^rc.*/
          requires:
            - dependency vulnerability scan
            - store artifacts staging
            - backend api endpoint test
            - backend lint
            - backend unit test
      - backend deploy:
          name: backend deploy prod
          env: PRODUCTION
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - dependency vulnerability scan
            - store artifacts prod
            - backend api endpoint test
            - backend lint
            - backend unit test
      - common test:
          filters:
            tags:
              only: /.*/
          requires: 
            - install dependencies

      # frontend jobs
      - frontend lint:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
            - yaml test
      - frontend test:
          filters:
            tags:
              only: /.*/
          requires:
            - install dependencies
            - yaml test
      - frontend build:
          name: frontend build preview
          env: PRODUCTION
          filters:
            branches:
              ignore:
                - main
          requires:
            - validate openapi
            - owasp zap scan
            - frontend lint
            - backend lint
            - dependency vulnerability scan
            - frontend test
            - yaml test
            - common test
            - backend unit test
            - backend api endpoint test

      - frontend build:
          name: frontend build prod
          env: PRODUCTION
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - dependency vulnerability scan
      - frontend build:
          name: frontend build staging
          env: STAGING
          filters:
            branches:
              only:
                - main
            tags:
              only:
                - /^rc.*/                
          requires:
            - dependency vulnerability scan
      - frontend deploy:
          name: frontend deploy staging
          env: STAGING
          filters:
            branches:
              only:
                - main
            tags:
              only:
                - /^rc.*/                
          requires:
            - frontend build staging
            - dependency vulnerability scan
            - frontend lint
            - frontend test
            - yaml test
            - common test
            - e2e test staging
            - chromatic deployment staging

      - frontend deploy:
          name: frontend deploy production
          env: PRODUCTION
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - frontend build prod
            - dependency vulnerability scan
            - frontend lint
            - frontend test
            - yaml test
            - common test
            - e2e test production
            - chromatic deployment production

      # joint jobs
      - preview deploy:
          filters:
            branches:
              ignore:
                - main
                - gh-pages
                - snyk-upgrade-*
            tags:
              ignore: /^noinfra.*/
          requires:
            - frontend build preview
            - yaml test

      - store artifacts:
          name: store artifacts staging
          filters:
            branches:
              only:
                - main
            tags:
              only:
                - /^rc.*/                  
          requires:
            - dependency vulnerability scan
            - frontend build staging

      - store artifacts:
          name: store artifacts prod
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
          requires:
            - dependency vulnerability scan
            - frontend build prod

jobs:
  # ===== Independent jobs =====
  # These jobs don't rely on anything else having happened first, and cut
  # across both backend and frontend.

  # Creates the AWS AMIs that we use to build our app on based on the provided Golden Images
  build preview ami:
    docker:
      - image: cimg/base:2022.06-22.04
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - run:
          name: Install Packer for Preview
          command: |
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository -y "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install packer
      - run:
          name: Packer Build Preview AMI
          no_output_timeout: 30m
          working_directory: ~/project/packer
          command: |
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            packer build --var vpc_id=$VPC_ID --var subnet_id=$SUBNET_ID --var gold_owner=$GOLD_OWNER --var preview_mongo_database=$PREVIEW_MONGO_DATABASE \
              --var preview_mongo_initdb_root_username=$PREVIEW_MONGO_INITDB_ROOT_USERNAME --var preview_mongo_initdb_root_password=$PREVIEW_MONGO_INITDB_ROOT_PASSWORD \
              --var preview_mongo_initdb_database=$PREVIEW_MONGO_INITDB_DATABASE \
              --var preview_mongo_database_username=$PREVIEW_MONGO_DATABASE_USERNAME --var preview_mongo_database_password=$PREVIEW_MONGO_DATABASE_PASSWORD \
              --var preview_mongo_admin_url=$PREVIEW_MONGO_ADMIN_URL --var preview_mongo_url=$PREVIEW_MONGO_URL --var preview_database_url=$PREVIEW_DATABASE_URL \
              --var preview_okta_domain=$PREVIEW_OKTA_DOMAIN --var preview_okta_api_key=$PREVIEW_OKTA_API_KEY --var environment=Preview \
              --var preview_tealium_tag=$PREVIEW_TEALIUM_TAG --var preview_tealium_env=$PREVIEW_TEALIUM_ENV \
              preview-ami.pkr.hcl
  
  packer validation tests:
    docker:
      - image: cimg/base:2022.06-22.04
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW

    steps:
      - checkout
      - run: 
          name: Install Packer for Validation
          command: |
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository -y "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install packer

      - run: 
          name: Validate Preview AMI
          working_directory: ~/project/packer
          command: |
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            packer validate --var vpc_id=$VPC_ID --var subnet_id=$SUBNET_ID --var gold_owner=$GOLD_OWNER --var preview_mongo_database=$PREVIEW_MONGO_DATABASE \
              --var preview_mongo_initdb_root_username=$PREVIEW_MONGO_INITDB_ROOT_USERNAME --var preview_mongo_initdb_root_password=$PREVIEW_MONGO_INITDB_ROOT_PASSWORD \
              --var preview_mongo_initdb_database=$PREVIEW_MONGO_INITDB_DATABASE \
              --var preview_mongo_database_username=$PREVIEW_MONGO_DATABASE_USERNAME --var preview_mongo_database_password=$PREVIEW_MONGO_DATABASE_PASSWORD \
              --var preview_mongo_admin_url=$PREVIEW_MONGO_ADMIN_URL --var preview_mongo_url=$PREVIEW_MONGO_URL --var preview_database_url=$PREVIEW_DATABASE_URL \
              --var preview_okta_domain=$PREVIEW_OKTA_DOMAIN --var preview_okta_api_key=$PREVIEW_OKTA_API_KEY --var environment=Preview \
              --var preview_tealium_tag=$PREVIEW_TEALIUM_TAG --var preview_tealium_env=$PREVIEW_TEALIUM_ENV \
              preview-ami.pkr.hcl
      - run:
          name: Validate Mongo AMI
          working_directory: ~/project/packer
          command: |
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            packer validate --var vpc_id=$VPC_ID --var subnet_id=$SUBNET_ID --var gold_owner=$GOLD_OWNER --var mongo_database=$PREVIEW_MONGO_DATABASE \
              --var mongo_initdb_root_username=$PREVIEW_MONGO_INITDB_ROOT_USERNAME --var mongo_initdb_root_password=$PREVIEW_MONGO_INITDB_ROOT_PASSWORD \
              --var mongo_initdb_database=$PREVIEW_MONGO_INITDB_DATABASE --var mongo_database_username=$PREVIEW_MONGO_DATABASE_USERNAME --var mongo_database_password=$PREVIEW_MONGO_DATABASE_PASSWORD \
              --var mongo_admin_url=$PREVIEW_MONGO_ADMIN_URL --var mongo_url=$PREVIEW_MONGO_URL --var database_url=$PREVIEW_DATABASE_URL \
              --var okta_domain=$PREVIEW_MONGO_OKTA_DOMAIN --var okta_api_key=$PREVIEW_OKTA_API_KEY --var environment=Preview \
              mongo-ami.pkr.hcl

      - run:
          name: Validate Backend AMI
          working_directory: ~/project/packer
          command: |
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            packer validate --var vpc_id=$VPC_ID --var subnet_id=$SUBNET_ID --var gold_owner=$GOLD_OWNER --var environment=Production \
            backend-ami.pkr.hcl


  terraform validation tests:
    docker:
      - image: cimg/base:2022.06-22.04
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - run:
          name: cloning AWS notify module
          working_directory: ~/
          command: |
            git clone https://github.com/terraform-aws-modules/terraform-aws-notify-slack
      - run: 
          name: install terraform
          command: |
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository -y "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install terraform=1.3.0 
      - run:
          name: validate main.tf
          working_directory: ~/project/terraform/legacy/
          command: |
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            terraform init            
            terraform validate
      - run: 
          name: validate preview.tf
          working_directory: ~/project/terraform/legacy/preview
          command: |
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            terraform init
            terraform validate
      - run: 
          name: validate public.tf
          working_directory: ~/project/terraform/legacy/public
          command: |
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            terraform init
            terraform validate
      - run: 
          name: validate staging.tf
          working_directory: ~/project/terraform/legacy/staging
          command: |
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            terraform init
            terraform validate
      - run: 
          name: validate prod.tf
          working_directory: ~/project/terraform/legacy/prod
          command: |
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            terraform init
            terraform validate

  build production staging ami:
    docker:
      - image: cimg/base:2022.06-22.04
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - run:
          name: Install Packer for Prod
          command: |
            curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
            sudo apt-add-repository -y "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
            sudo apt-get update && sudo apt-get install packer
      - run:
          name: Packer Build Production AMI
          no_output_timeout: 30m
          working_directory: ~/project/packer
          command: |
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY          
            packer build --var vpc_id=$VPC_ID --var subnet_id=$SUBNET_ID --var gold_owner=$GOLD_OWNER --var environment=Production \
              backend-ami.pkr.hcl
  cleanup preview ami:
    docker:
      - image: cimg/base:2022.06-22.04
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - run:
          name: Cleanup Old Unused Preview AMIs
          working_directory: ~/project/bin/preview-deploy
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY          
            ./aws.preview-ami-cleanup.sh

  cleanup production staging ami:
    docker:
      - image: cimg/base:2022.06-22.04
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - run:
          name: Cleanup Old/Unused Production/Staging AMIs
          working_directory: ~/project/bin/prod-deploy
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            export AWS_REGION=$AWS_REGION
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY          
            ./aws.prod-ami-cleanup.sh

  # Installs yarn dependencies for the frontend and backend pieces, then saves
  # those in the workflow workspace. Save the yarn cache to CircleCI cache to
  # speed up subsequent builds, but don't save the dependencies to cache
  # because "yarn install --frozen-lockfile" deletes the node_modules folder anyway so it's pointless.
  install dependencies:
    docker:
      - image: cimg/node:16.16.0
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - restore_cache:
          name: restore yarn package cache
          keys:
            - cms-eapd-yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: install dependencies
          working_directory: ~/project
          command: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
      - run:
          name: setup nvm
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            nvm install 16.16.0
            nvm alias default 16.16.0
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - save_cache:
          name: save yarn package cache
          key: cms-eapd-yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - persist_to_workspace:
          root: ~/project
          paths:
            - node_modules
            - api/node_modules
            - web/node_modules

  # Runs an OpenAPI validator on the API spec generated by our code to ensure
  # it's a valid OpenAPI document.
  validate openapi:
    docker:
      - image: cimg/node:16.16.0
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: save OpenAPI JSON
          command: node -e "import('./api/routes/openAPI/index.js').then(loadedModule => console.log(JSON.stringify(loadedModule.default)))" > openapi.json
      - run:
          name: validate
          command: |
            echo "$DOCKER_EAPD_PW" |docker login -u $DOCKER_EAPD_UN --password-stdin
            docker create -v /openapi --name openapi cimg/node:16.16.0 /bin/true
            docker cp ./openapi.json openapi:/openapi
            docker run --volumes-from openapi -w /openapi usabillabv/openapi3-validator:0.2.0 openapi.json

  # Validates YAML files. Doesn't look at content, just structure. Doesn't
  # enforce a schema either - strictly checks that the files are valid YAML.
  yaml test:
    docker:
      - image: cimg/node:16.16.0
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - run:
          working_directory: ~/project/web
          command: |
            yarn install --frozen-lockfile
            yarn add glob
            yarn add js-yaml
            node yaml-tests.js

  e2e test:
    parameters:
      env:
        description: The environment being deployed
        type: string  
    machine:
      image: ubuntu-2004:202104-01
    resource_class: large
    parallelism: 8
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: set up node
          working_directory: ~/project
          command: |
            sudo apt-get update
            sudo apt-get install -y libgbm-dev wget fonts-liberation xdg-utils
            wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
            sudo dpkg -i google-chrome-stable_current_amd64.deb || true
            sudo apt-get -f install
            sudo dpkg -i google-chrome-stable_current_amd64.deb
             # Switch to Node 16.16.0.
            export NVM_DIR="/opt/circleci/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 16.16.0
            nvm alias default 16.16.0
            nvm use 16.16.0
      - run:
          name: build images
          no_output_timeout: 30m
          working_directory: ~/project
          command: |
            export NODE_ENV=development
            export OKTA_DOMAIN="$PREVIEW_OKTA_DOMAIN"
            export OKTA_API_KEY="$PREVIEW_OKTA_API_KEY"
            export OKTA_SERVER_ID="$PREVIEW_OKTA_SERVER_ID"
            export OKTA_CLIENT_ID="$PREVIEW_OKTA_CLIENT_ID"
            export JWT_SECRET="$PREVIEW_JWT_SECRET"
            export TEALIUM_TAG="$PREVIEW_TEALIUM_TAG"
            export TEALIUM_ENV="test"
            export LD_API_KEY="$PREVIEW_LD_API_KEY"
            export LD_CLIENT_ID="$PREVIEW_LD_CLIENT_ID"
            nvm use 16.16.0
            yarn install --frozen-lockfile
            echo "$DOCKER_EAPD_PW" |docker login -u $DOCKER_EAPD_UN --password-stdin
            docker-compose up -d
            sleep 10
            echo "Sleep has run"
            docker-compose exec api yarn run migrate
            docker-compose exec api yarn run seed
      - run:
          name: set up cypress
          working_directory: ~/project/e2e
          no_output_timeout: 30m
          command: |
            echo $CYPRESS_ENV >> ./cypress.env.json
            nvm use 16.16.0
            npx cypress@10.5.0 install --force
            npx cypress verify
      - run:
          name: run e2e tests authentication
          working_directory: ~/project/e2e
          no_output_timeout: 60m
          command: |
            if [[ $CIRCLE_NODE_INDEX == "0" ]]; then nvm use 16.16.0; fi
            if [[ $CIRCLE_NODE_INDEX == "0" ]]; then export NODE_ENV=development; fi
            if [[ $CIRCLE_NODE_INDEX == "0" ]]; then export DEV_DB_HOST=localhost; fi
            if [[ $CIRCLE_NODE_INDEX == "0" ]]; then export DEV_DB_PORT=54325; fi
            if [[ $CIRCLE_NODE_INDEX == "0" ]]; then export CYPRESS_RECORD_KEY="$CYPRESS_RECORD_KEY"; fi
            if [[ $CIRCLE_NODE_INDEX == "0" ]]; then yarn run cy:run:e2e-ci -- --record --key $CYPRESS_RECORD_KEY --ci-build-id "$CIRCLE_BUILD_NUM-$CIRCLE_BRANCH" --group "e2e tests authentication" --spec "cypress/integration/01-authentication/*.cy.js"; fi
      - run:
          name: run e2e tests apd - basics
          working_directory: ~/project/e2e
          no_output_timeout: 60m
          command: |
            if [[ $CIRCLE_NODE_INDEX == "1" ]]; then nvm use 16.16.0; fi
            if [[ $CIRCLE_NODE_INDEX == "1" ]]; then export NODE_ENV=development; fi
            if [[ $CIRCLE_NODE_INDEX == "1" ]]; then export DEV_DB_HOST=localhost; fi
            if [[ $CIRCLE_NODE_INDEX == "1" ]]; then export DEV_DB_PORT=54325; fi
            if [[ $CIRCLE_NODE_INDEX == "1" ]]; then export CYPRESS_RECORD_KEY="$CYPRESS_RECORD_KEY"; fi
            if [[ $CIRCLE_NODE_INDEX == "1" ]]; then yarn run cy:run:e2e-ci -- --record --key $CYPRESS_RECORD_KEY --ci-build-id "$CIRCLE_BUILD_NUM-$CIRCLE_BRANCH" --group "e2e tests apd basics" --spec "cypress/integration/02-apd/01-apd-basics.cy.js"; fi
      - run:
          name: run e2e tests apd - default
          working_directory: ~/project/e2e
          no_output_timeout: 60m
          command: |
            if [[ $CIRCLE_NODE_INDEX == "2" ]]; then nvm use 16.16.0; fi
            if [[ $CIRCLE_NODE_INDEX == "2" ]]; then export NODE_ENV=development; fi
            if [[ $CIRCLE_NODE_INDEX == "2" ]]; then export DEV_DB_HOST=localhost; fi
            if [[ $CIRCLE_NODE_INDEX == "2" ]]; then export DEV_DB_PORT=54325; fi
            if [[ $CIRCLE_NODE_INDEX == "2" ]]; then export CYPRESS_RECORD_KEY="$CYPRESS_RECORD_KEY"; fi
            if [[ $CIRCLE_NODE_INDEX == "2" ]]; then yarn run cy:run:e2e-ci -- --record --key $CYPRESS_RECORD_KEY --ci-build-id "$CIRCLE_BUILD_NUM-$CIRCLE_BRANCH" --group "e2e tests apd default" --spec "cypress/integration/02-apd/02-default-apd.cy.js"; fi
      - run:
          name: run e2e tests apd - data
          working_directory: ~/project/e2e
          no_output_timeout: 60m
          command: |
            if [[ $CIRCLE_NODE_INDEX == "3" ]]; then nvm use 16.16.0; fi
            if [[ $CIRCLE_NODE_INDEX == "3" ]]; then export NODE_ENV=development; fi
            if [[ $CIRCLE_NODE_INDEX == "3" ]]; then export DEV_DB_HOST=localhost; fi
            if [[ $CIRCLE_NODE_INDEX == "3" ]]; then export DEV_DB_PORT=54325; fi
            if [[ $CIRCLE_NODE_INDEX == "3" ]]; then export CYPRESS_RECORD_KEY="$CYPRESS_RECORD_KEY"; fi
            if [[ $CIRCLE_NODE_INDEX == "3" ]]; then yarn run cy:run:e2e-ci -- --record --key $CYPRESS_RECORD_KEY --ci-build-id "$CIRCLE_BUILD_NUM-$CIRCLE_BRANCH" --group "e2e tests apd data" --spec "cypress/integration/02-apd/03-apd-with-data.cy.js"; fi
      - run:
          name: run e2e tests apd - budget
          working_directory: ~/project/e2e
          no_output_timeout: 60m
          command: |
            if [[ $CIRCLE_NODE_INDEX == "4" ]]; then nvm use 16.16.0; fi
            if [[ $CIRCLE_NODE_INDEX == "4" ]]; then export NODE_ENV=development; fi
            if [[ $CIRCLE_NODE_INDEX == "4" ]]; then export DEV_DB_HOST=localhost; fi
            if [[ $CIRCLE_NODE_INDEX == "4" ]]; then export DEV_DB_PORT=54325; fi
            if [[ $CIRCLE_NODE_INDEX == "4" ]]; then export CYPRESS_RECORD_KEY="$CYPRESS_RECORD_KEY"; fi
            if [[ $CIRCLE_NODE_INDEX == "4" ]]; then yarn run cy:run:e2e-ci -- --record --key $CYPRESS_RECORD_KEY --ci-build-id "$CIRCLE_BUILD_NUM-$CIRCLE_BRANCH" --group "e2e tests apd budget" --spec "cypress/integration/02-apd/04-apd-budget-checks.cy.js"; fi
      - run:
          name: run e2e tests admin
          working_directory: ~/project/e2e
          no_output_timeout: 60m
          command: |
            if [[ $CIRCLE_NODE_INDEX == "5" ]]; then nvm use 16.16.0; fi
            if [[ $CIRCLE_NODE_INDEX == "5" ]]; then export NODE_ENV=development; fi
            if [[ $CIRCLE_NODE_INDEX == "5" ]]; then export DEV_DB_HOST=localhost; fi
            if [[ $CIRCLE_NODE_INDEX == "5" ]]; then export DEV_DB_PORT=54325; fi
            if [[ $CIRCLE_NODE_INDEX == "5" ]]; then export CYPRESS_RECORD_KEY="$CYPRESS_RECORD_KEY"; fi
            if [[ $CIRCLE_NODE_INDEX == "5" ]]; then yarn run cy:run:e2e-ci -- --record --key $CYPRESS_RECORD_KEY --ci-build-id "$CIRCLE_BUILD_NUM-$CIRCLE_BRANCH" --group "e2e tests admin" --spec "cypress/integration/03-admin/*.cy.js"; fi
      - run:
          name: run e2e bug tests
          working_directory: ~/project/e2e
          no_output_timeout: 60m
          command: |
            if [[ $CIRCLE_NODE_INDEX == "6" ]]; then nvm use 16.16.0; fi
            if [[ $CIRCLE_NODE_INDEX == "6" ]]; then export NODE_ENV=development; fi
            if [[ $CIRCLE_NODE_INDEX == "6" ]]; then export DEV_DB_HOST=localhost; fi
            if [[ $CIRCLE_NODE_INDEX == "6" ]]; then export DEV_DB_PORT=54325; fi
            if [[ $CIRCLE_NODE_INDEX == "6" ]]; then export CYPRESS_RECORD_KEY="$CYPRESS_RECORD_KEY"; fi
            if [[ $CIRCLE_NODE_INDEX == "6" ]]; then yarn run cy:run:e2e-ci -- --record --key $CYPRESS_RECORD_KEY --ci-build-id "$CIRCLE_BUILD_NUM-$CIRCLE_BRANCH" --group "e2e bug tests" --spec "cypress/integration/04-bug-tests/*.cy.js"; fi
  
      - run:
          name: run e2e mmis tests
          working_directory: ~/project/e2e
          no_output_timeout: 60m
          command: |
            if [[ $CIRCLE_NODE_INDEX == "7" ]]; then nvm use 16.16.0; fi
            if [[ $CIRCLE_NODE_INDEX == "7" ]]; then export NODE_ENV=development; fi
            if [[ $CIRCLE_NODE_INDEX == "7" ]]; then export DEV_DB_HOST=localhost; fi
            if [[ $CIRCLE_NODE_INDEX == "7" ]]; then export DEV_DB_PORT=54325; fi
            if [[ $CIRCLE_NODE_INDEX == "7" ]]; then export CYPRESS_RECORD_KEY="$CYPRESS_RECORD_KEY"; fi
            if [[ $CIRCLE_NODE_INDEX == "7" ]]; then yarn run cy:run:e2e-ci -- --record --key $CYPRESS_RECORD_KEY --ci-build-id "$CIRCLE_BUILD_NUM-$CIRCLE_BRANCH" --group "e2e mmis tests" --spec "cypress/integration/05-mmis/*.cy.js"; fi

      - run:
          name: report coverage for e2e
          when: always
          working_directory: ~/project/e2e/cypress
          command: bash <(curl -s https://codecov.io/bash)

  chromatic deployment:
    parameters:
      env:
        description: The environment being deployed
        type: string  
    docker:
      - image: cimg/node:16.16.0
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    #resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ~/project/web
      - run:
          name: Install Web Dependencies
          working_directory: ~/project/web
          command: yarn install --frozen-lockfile
      - run:
          name: Deploy to Chromatic
          working_directory: ~/project/web
          no_output_timeout: 90m
          command: |
            export TEALIUM_ENV="test"
            STORYBOOK_BUILD_TIMEOUT=1200000 yarn build:storybook
            yarn deploy-chromatic --project-token=${CHROMATIC_PROJECT_TOKEN}

  # ===== Backend jobs =====
  # These all depend on "install dependencies" running first.

  # Runs backend API integration/end-to-end tests.
  #backend api endpoint test:
  #  machine: true
  #    #image: ubuntu-2004:202104-01
  #  steps:
  #    - checkout
  #    - attach_workspace:
  #        at: ~/project
  #    - run:
  #        name: build API image
  #        working_directory: ~/project/api
  #        command: |
  #          docker login -u $DOCKER_TESTS_UN -p $DOCKER_TESTS_PW
  #          docker build -t cms-eapd/api ./
  #    - run:
  #        name: run tests
  #        working_directory: ~/project/api
  #        command: |
  #          # Switch to Node 16.16.0.
  #          sudo apt-get purge nodejs -y && sudo apt-get install -y nodejs yarn
  #          export NVM_DIR="/opt/circleci/.nvm"
  #          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  #          nvm install 16.16.0
  #          nvm alias default 16.16.0
  #          nvm i
  #          ./endpoint-tests/endpoint.sh

  ############### Rewrite of Backend API Tests
  backend api endpoint test:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: build API image
          working_directory: ~/project
          command: |
            export LD_API_KEY="$PREVIEW_LD_API_KEY"
            export NODE_ENV=test

            echo "$DOCKER_EAPD_PW" |docker login -u $DOCKER_EAPD_UN --password-stdin
            docker build -t cms-eapd/api -f ./api/Dockerfile ./
      - run:
          name: run tests
          working_directory: ~/project/api
          no_output_timeout: 60m
          command: |
            export LD_API_KEY="$PREVIEW_LD_API_KEY"
            export NODE_ENV=test

            echo "$DOCKER_EAPD_PW" |docker login -u $DOCKER_EAPD_UN --password-stdin
            export COMPOSE_PROJECT_NAME=api 
            ./endpoint-tests/endpoint.sh

  # Lints the backend code.
  backend lint:
    docker:
      - image: cimg/node:16.16.0
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: run linter
          working_directory: ~/project/api
          command: yarn lint

  # Runs backend unit tests and reports coverage to codecov.io.
  backend unit test:
    machine:
      image: ubuntu-2204:2022.04.2
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: build API image
          working_directory: ~/project
          command: |
            echo "$DOCKER_EAPD_PW" |docker login -u $DOCKER_EAPD_UN --password-stdin
            docker build -t cms-eapd/api -f ./api/Dockerfile ./
      - run:
          name: run tests
          working_directory: ~/project/api
          no_output_timeout: 60m
          command: |
            echo "$DOCKER_EAPD_PW" |docker login -u $DOCKER_EAPD_UN --password-stdin
            export COMPOSE_PROJECT_NAME=api
            ./unit-test.sh
      - run:
          name: report coverage
          when: always
          working_directory: ~/project/api
          command: bash <(curl -s https://codecov.io/bash)

  # ===== Common jobs ===== #
  # Runs common tests and reports coverage to codecov.io.
  common test:
    docker:
      - image: cimg/node:16.16.0
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_cache:
          name: restore yarn package cache
          keys:
            - cms-eapd-yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: run tests
          working_directory: ~/project/common
          no_output_timeout: 60m
          command: |
            yarn test
      - run:
          name: report coverage
          when: always
          working_directory: ~/project/common
          command: bash <(curl -s https://codecov.io/bash)

  # ===== Frontend jobs =====
  # These all depend on "install dependencies" running first.

  # Builds the static web app into the ~/project/web/dist directory and then
  # saves that into the workflow workspace.
  frontend build:
    parameters:
      env:
        description: The environment being deployed
        type: string
    docker:
      - image: cimg/node:16.16.0
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Prepare Yarn for Web App Build
          working_directory: ~/project
          command: yarn install --frozen-lockfile --production --non-interactive --network-timeout 1000000 > yarn-install.log
      - run:
          name: build the web app
          working_directory: ~/project/web
          command: LD_CLIENT_ID="${<< parameters.env >>_LD_CLIENT_ID}" TEALIUM_ENV="${<< parameters.env >>_TEALIUM_ENV}" TEALIUM_TAG="${<< parameters.env >>_TEALIUM_TAG}" API_URL="${<< parameters.env >>_WEB_API_URL}" OKTA_DOMAIN="${<< parameters.env >>_OKTA_DOMAIN}" OKTA_SERVER_ID="${<< parameters.env >>_OKTA_SERVER_ID}" OKTA_CLIENT_ID="${<< parameters.env >>_OKTA_CLIENT_ID}" JWT_SECRET="${<< parameters.env >>_JWT_SECRET}" MONGO_INITDB_DATABASE="${<< parameters.env >>_MONGO_INITDB_DATABASE}" MONGO_URL="${<< parameters.env >>_MONGO_URL}" yarn build
      - persist_to_workspace:
          root: ~/project
          paths:
            - web/dist
      - run:
          name: persist build URL to workspace
          command: echo "https://${CIRCLE_BUILD_NUM}-${GH_REPO_ID}-gh.circle-artifacts.com/0" > build-url.txt
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./build-url.txt

  # Lints the frontend code.
  frontend lint:
    docker:
      - image: cimg/node:16.16.0
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: run linter
          working_directory: ~/project/web
          command: yarn lint

  # Runs frontend tests and reports coverage to codecov.io.
  frontend test:
    docker:
      - image: cimg/node:16.16.0
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - restore_cache:
          name: restore yarn package cache
          keys:
            - cms-eapd-yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: run tests
          working_directory: ~/project/web
          command: |
            export TEALIUM_ENV="test"
            yarn test --runInBand
      - run:
          name: report coverage
          when: always
          working_directory: ~/project/web
          command: bash <(curl -s https://codecov.io/bash)

  # ===== Shared jobs =====
  # These all depend on "install dependencies" running first.

  # Uses audit-ci to scan the installed dependencies for known vulnerabilities.
  dependency vulnerability scan:
    docker:
      - image: cimg/node:16.16.0
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: vulnerability scan
          command: |
            yarn run audit

  owasp zap scan:
    machine:
      image: ubuntu-2204:2022.04.2
    #resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: start everything up
          working_directory: ~/project
          no_output_timeout: 30m
          command: |
            export OKTA_DOMAIN="$PREVIEW_OKTA_DOMAIN"
            export OKTA_API_KEY="$PREVIEW_OKTA_API_KEY"
            export OKTA_SERVER_ID="$PREVIEW_OKTA_SERVER_ID"
            export OKTA_CLIENT_ID="$PREVIEW_OKTA_CLIENT_ID"
            export JWT_SECRET="$PREVIEW_JWT_SECRET"
            export LD_API_KEY="$PREVIEW_LD_API_KEY"
            export NODE_ENV=test

            echo "$DOCKER_EAPD_PW" |docker login -u $DOCKER_EAPD_UN --password-stdin
            export COMPOSE_PROJECT_NAME=api
            COMPOSE_HTTP_TIMEOUT=200 docker-compose -f docker-compose.endpoint-tests.yml -p api up -d
            
            echo "containers created"
            sleep 200;
            echo "waiting for api-for-testing..."

            is_healthy() {
                service="$1"
                container_id="$(docker-compose -f ../docker-compose.endpoint-tests.yml -p api ps -q "$service")"
                health_status="$(docker inspect -f "{{.State.Health.Status}}" "$container_id")"

                if [ "$health_status" = "healthy" ]; then
                    return 0
                else
                    echo '.'
                    return 1
                fi
            }

            while ! is_healthy api-for-testing; do sleep 60; done
            echo "api-for-testing is running"

            docker-compose -f docker-compose.endpoint-tests.yml -p api exec api-for-testing yarn run migrate
            docker-compose -f docker-compose.endpoint-tests.yml -p api exec api-for-testing yarn run seed
      - run:
          name: pull owasp zap docker image
          working_directory: ~/project/api
          command: |
            echo "$DOCKER_EAPD_PW" |docker login -u $DOCKER_EAPD_UN --password-stdin
            export COMPOSE_PROJECT_NAME=api
            docker pull owasp/zap2docker-stable:2.11.1
      - run:
          name: run owasp zap
          working_directory: ~/project
          no_output_timeout: 60m
          command: |
            echo "$DOCKER_EAPD_PW" |docker login -u $DOCKER_EAPD_UN --password-stdin
            export COMPOSE_PROJECT_NAME=api
            echo 'Checking to see if the server is running'
            until [ "`docker inspect -f {{.State.Health.Status}} api-container`"=="healthy" ]; do
                sleep 10;
                echo '.';
            done;
            echo 'Server is running and status is healthy'

            docker run \
              --network api_default \
              -v $(pwd)/owasp:/zap/wrk:rw \
              owasp/zap2docker-stable:2.11.1 \
              zap-api-scan.py \
              -c api-scan.conf \
              -t http://api-for-testing:8000/open-api \
              -f openapi

  # ===== Deployment jobs =====
  # These may have varying prerequisites, but they're grouped here because
  # they are all related to deployment.

  # Backend production deployment.
  backend deploy:
    parameters:
      env:
        description: The environment being deployed
        type: string
    docker:
      - image: cimg/python:3.10.4
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    #resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: deploy to production
          working_directory: ~/project/bin/prod-deploy
          command: |
            sudo apt-get -qq update
            sudo apt-get -qq install jq -y
            pip install --quiet awscli
            ./aws.sh \
              --API_AWS_ACCESS_KEY_ID "${<< parameters.env >>_API_AWS_ACCESS_KEY_ID}" \
              --API_AWS_SECRET_ACCESS_KEY "${<< parameters.env >>_API_AWS_SECRET_ACCESS_KEY}" \
              --API_DATABASE_URL "${<< parameters.env >>_API_DATABASE_URL}" \
              --API_FILE_S3_BUCKET "${<< parameters.env >>_API_FILE_S3_BUCKET}" \
              --API_PBKDF2_ITERATIONS "${<< parameters.env >>_API_PBKDF2_ITERATIONS}" \
              --API_PORT "${<< parameters.env >>_API_PORT}" \
              --API_SESSION_SECRET "${<< parameters.env >>_API_SESSION_SECRET}" \
              --AWS_REGION "${<< parameters.env >>_API_AWS_REGION}" \
              --AWS_SECURITY_GROUP "${<< parameters.env >>_API_AWS_SECURITY_GROUP}" \
              --AWS_SUBNET "${<< parameters.env >>_API_AWS_SUBNET}" \
              --AWS_TARGET_GROUP "${<< parameters.env >>_API_AWS_TARGET_GROUP}" \
              --BUILD_URL "$(cat ../../build-url.txt)" \
              --ENVIRONMENT "$(echo '<< parameters.env >>' | tr '[:upper:]' '[:lower:]')" \
              --OKTA_DOMAIN "${<< parameters.env >>_OKTA_DOMAIN}" \
              --OKTA_SERVER_ID "${<< parameters.env >>_OKTA_SERVER_ID}" \
              --OKTA_CLIENT_ID "${<< parameters.env >>_OKTA_CLIENT_ID}" \
              --OKTA_API_KEY "${<< parameters.env >>_OKTA_API_KEY}" \
              --JWT_SECRET "${<< parameters.env >>_JWT_SECRET}" \
              --MONGO_DATABASE "${<< parameters.env >>_MONGO_DATABASE}" \
              --MONGO_URL "${<< parameters.env >>_MONGO_URL}" \
              --MONGO_ADMIN_URL "${<< parameters.env >>_MONGO_ADMIN_URL}" \
              --TEALIUM_TAG "${<< parameters.env >>_TEALIUM_TAG}" \
              --TEALIUM_ENV "${<< parameters.env >>_TEALIUM_ENV}" \
              --LD_API_KEY "${<< parameters.env >>_LD_API_KEY}" \
              --LD_CLIENT_ID "${<< parameters.env >>_LD_CLIENT_ID}"

      - run:
          when: on_fail
          name: notify on deployment failure
          command: |
            if [ -n "${SLACK_WEBHOOK_URL}" ]; then
              curl -X "POST" "${SLACK_WEBHOOK_URL}" \
                -H "Content-Type: application/json; charset=utf-8" \
                -d $'{
                  "attachments": [
                    {
                      "color": "#d83933",
                      "fallback": "<< parameters.env >> backend deployment has failed",
                      "text": "<< parameters.env >> backend deployment has failed"
                    }
                  ]
                }'
            fi
            false

  # Cleans up preview deploys that are no longer associated with open pull
  # requests.
  cleanup preview deploys:
    docker:
      - image: python:3
    steps:
      - checkout
      - run:
          name: cleanup deploys with no open PR
          working_directory: ~/project/bin/preview-deploy
          command: |
            apt-get -qq update
            apt-get -qq install jq -y
            pip install --quiet awscli
            ./aws.cleanup.sh \
              --AWS_REGION "$PRODUCTION_API_AWS_REGION" \
              --GH_BOT_TOKEN "$GH_BOT_TOKEN" \
              --GH_BOT_USER "$GH_BOT_USER"

  # Cleans up Packer AMIs that are no longer in use
  cleanup packer amis:
    docker:
      - image: python:3
    steps:
      - checkout
      - run:
          name: cleanup unused packer ami images
          working_directory: ~/project/bin/preview-deploy
          command: |
            apt-get -qq update
            apt-get -qq install jq -y
            pip install --quiet awscli
            ./aws.preview-ami-cleanup.sh \
              --AWS_REGION "$PRODUCTION_API_AWS_REGION"

  # Frontend production deployment.
  frontend deploy:
    parameters:
      env:
        description: The environment being deployed
        type: string
    docker:
      - image: cimg/python:3.10.4
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: sync to s3
          command: |
            sudo apt-get update
            sudo apt-get install awscli -y
            aws s3 sync web/dist s3://"${<< parameters.env >>_WEB_AWS_S3_BUCKET}" --region ${<< parameters.env >>_WEB_AWS_REGION} --delete
            # Copy up index.html separately, so we can set metadata on it to
            # disable client cacheing
            aws s3 cp web/dist/index.html s3://"${<< parameters.env >>_WEB_AWS_S3_BUCKET}/index.html" --cache-control no-cache --region ${<< parameters.env >>_WEB_AWS_REGION}
      - run:
          when: on_fail
          name: notify on deployment failure
          command: |
            if [ -n "${SLACK_WEBHOOK_URL}" ]; then
              curl -X "POST" "${SLACK_WEBHOOK_URL}" \
                -H "Content-Type: application/json; charset=utf-8" \
                -d $'{
                  "attachments": [
                    {
                      "color": "#d83933",
                      "fallback": "<< parameters.env >> frontend deployment has failed",
                      "text": "<< parameters.env >> frontend deployment has failed"
                    }
                  ]
                }'
            fi
            false

  # Preview deployment, used to put up preview links in pull requests
  preview deploy:
    docker:
      - image: cimg/python:3.10.4
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - run:
          name: deploy to preview
          working_directory: ~/project/bin/preview-deploy
          command: |
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              sudo apt-get -qq update
              sudo apt-get -qq install jq -y
              pip install --quiet awscli
              PRNUM=$(basename $CIRCLE_PULL_REQUEST)
              URL=$(./aws.sh \
                --API_PBKDF2_ITERATIONS "$PREVIEW_API_PBKDF2_ITERATIONS" \
                --AWS_REGION "$PREVIEW_AWS_REGION" \
                --AWS_SECURITY_GROUP "$PREVIEW_AWS_SECURITY_GROUP" \
                --AWS_SUBNET "$PREVIEW_AWS_SUBNET" \
                --BRANCH "$CIRCLE_BRANCH" \
                --PR_NUM "$PRNUM" \
                --OKTA_DOMAIN "$PREVIEW_OKTA_DOMAIN" \
                --OKTA_SERVER_ID "$PREVIEW_OKTA_SERVER_ID" \
                --OKTA_CLIENT_ID "$PREVIEW_OKTA_CLIENT_ID" \
                --OKTA_API_KEY "$PREVIEW_OKTA_API_KEY" \
                --JWT_SECRET "$PREVIEW_JWT_SECRET" \
                --MONGO_INITDB_ROOT_USERNAME "$PREVIEW_MONGO_INITDB_ROOT_USERNAME" \
                --MONGO_INITDB_ROOT_PASSWORD "$PREVIEW_MONGO_INITDB_ROOT_PASSWORD" \
                --MONGO_INITDB_DATABASE "$PREVIEW_MONGO_INITDB_DATABASE" \
                --MONGO_DATABASE_USERNAME "$PREVIEW_MONGO_DATABASE_USERNAME" \
                --MONGO_DATABASE_PASSWORD "$PREVIEW_MONGO_DATABASE_PASSWORD" \
                --MONGO_DATABASE "$PREVIEW_MONGO_DATABASE" \
                --MONGO_URL "$PREVIEW_MONGO_URL" \
                --MONGO_ADMIN_URL "$PREVIEW_MONGO_ADMIN_URL" \
                --DATABASE_URL "$PREVIEW_DATABASE_URL" \
                --TEALIUM_TAG "$PREVIEW_TEALIUM_TAG" \
                --TEALIUM_ENV "$PREVIEW_TEALIUM_ENV" \
                --LD_API_KEY "$PREVIEW_LD_API_KEY" \
                --LD_CLIENT_ID "$PREVIEW_LD_CLIENT_ID"
              )
              ./github-comment.sh "$PRNUM" "https://$URL" "$CIRCLE_SHA1"
            else
              echo "Not a pull request"
            fi

  # Zips up artifacts created in build steps and makes them available as
  # CircleCI artifact downloads.
  store artifacts:
    docker:
      - image: cimg/node:16.16.0
        auth:
          username: $DOCKER_EAPD_UN
          password: $DOCKER_EAPD_PW
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: create backend build artifact zip
          working_directory: ~/project
          command: |
            sudo apt-get update
            sudo apt-get install zip -y
            yarn install --frozen-lockfile --production=true --network-timeout 1000000
            zip -r /tmp/backend.zip api/* common/* package.json yarn.lock
      - store_artifacts:
          path: /tmp/backend.zip
          destination: backend.zip
      - run:
          name: Persist Build URL to Workspace
          working_directory: ~/project
          command: sh bin/prod-deploy/buildurl.sh CIRCLE_TOKEN=${CIRCLE_TOKEN} CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} > ./build-url.txt
      - persist_to_workspace:
          root: ~/project
          paths:
            - ./build-url.txt
